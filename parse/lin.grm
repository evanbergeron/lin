structure A = Ast

%%
%header (functor LinLrValsFn (structure Token : TOKEN))

%eop EOF

%term
   EOF
 | ZERO
 | SUCC
 | LPAREN | RPAREN
 | PIPE
 | LAM
 | SARROW
 | COLON
 | NAT
 | APP
 | IDX of int
 | ID of string
 | FST
 | SND
 | COMMA
 | STAR
 | DOT
 | WITH
 | AS
 | IN
 | OF
 | LET
 | EQ
 | IFZ
 | FIX
 | FUN
 | LIN
 | UN
 | SPLIT

%nonterm
   exp of A.Exp
 | typ of A.Typ
 | qual of A.Qual
 | pretyp of A.PreType
 | program of A.Exp

%verbose
%pos int
%start exp
%eop EOF

%name Lin

(* Each rule is then assigned the precedence of its rightmost terminal *)
(* If the rule has the higher precedence, the reduction is chosen. *)
(* The precedence grows down *)
%nonassoc EOF ZERO SUCC LPAREN RPAREN PIPE LAM COLON NAT IDX ID COMMA STAR FST SND DOT WITH AS IN OF LET EQ IFZ FIX FUN LIN UN SPLIT
%right SARROW
%nonassoc APP (* Deliberately last *)

%%

qual:
    LIN (A.Lin)
  | UN (A.Un)

exp:
    LPAREN exp RPAREN (exp)
  | exp exp %prec APP (A.App(exp1, exp2))
  | ID (A.Var (ID, ~1))
  | qual ZERO (A.Zero qual)
  | SUCC exp (A.Succ exp)
  | qual LAM ID COLON typ EQ exp (A.Lam (qual, ID, typ, exp))
  | LET ID COLON typ EQ exp IN exp (A.Let (ID, typ, exp1, exp2))
  | IFZ exp OF ZERO SARROW exp PIPE SUCC ID SARROW exp (A.Ifz (exp1, exp2, ID, exp3))
  | FUN ID COLON typ EQ exp IN exp (A.Let(ID1, typ1, A.Fix(ID1, typ1, exp1), exp2))
  | FIX ID COLON typ IN exp (A.Fix (ID, typ, exp))
  | qual LPAREN exp COMMA exp RPAREN (A.Tuple(qual, exp1, exp2))
  | SPLIT exp AS ID COMMA ID IN exp (A.Split(exp1, ID1, ID2, exp2))
  | FST exp (A.ProdLeft exp)
  | SND exp (A.ProdRight exp)

typ:
    qual pretyp (A.Type(qual, pretyp))

pretyp:
    NAT (A.Nat)
  | pretyp SARROW pretyp (A.Arr(pretyp1, pretyp2))
  | pretyp STAR pretyp (A.Prod(pretyp1, pretyp2))
  | LPAREN pretyp RPAREN (pretyp)
  | ID (A.TypVarName ID)
